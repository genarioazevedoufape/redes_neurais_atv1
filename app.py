from matplotlib.pylab import LinAlgError
import streamlit as st
import pandas as pd
import numpy as np
import os
import sys

# Adicionar o diret√≥rio raiz do projeto ao path para importa√ß√£o modular
try:
    from data.nba_data_loader import get_available_teams, get_team_id, load_team_game_log, get_available_stats_columns
    from utils.preprocessing import prepare_data
    from utils.visualization import (
        plot_regression_line, plot_prediction_vs_reality, plot_confusion_matrix, 
        plot_trend_with_confidence, plot_roc_curve, plot_calibration_curve,
        plot_feature_importance, plot_residuals  
    )
    from models.linear_regression_model import LinearRegressionModel
    from models.logistic_regression_model import LogisticRegressionModel
except ImportError:
    # Se a importa√ß√£o falhar, tentamos adicionar o diret√≥rio pai (onde os m√≥dulos est√£o)
    sys.path.append(os.path.dirname(__file__))
    from data.nba_data_loader import get_available_teams, get_team_id, load_team_game_log, get_available_stats_columns
    from utils.preprocessing import prepare_data
    from utils.visualization import (
        plot_regression_line, plot_prediction_vs_reality, plot_confusion_matrix, 
        plot_trend_with_confidence, plot_roc_curve, plot_calibration_curve,
        plot_feature_importance, plot_residuals  
    )
    from models.linear_regression_model import LinearRegressionModel
    from models.logistic_regression_model import LogisticRegressionModel

# --- Configura√ß√£o da P√°gina ---
st.set_page_config(
    page_title="NBA Predictor: Regress√£o Linear e Log√≠stica",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- T√≠tulo Principal ---
st.title("üèÄ NBA Predictor: An√°lise Preditiva com Regress√£o")

# --- Sidebar para Entradas do Usu√°rio ---
st.sidebar.header("‚öôÔ∏è Configura√ß√µes da An√°lise")

# 1. Selecionar o tipo de regress√£o
regression_type = st.sidebar.radio(
    "1. Selecione o Tipo de Regress√£o:",
    ("Linear", "Log√≠stica")
)

# 2. Escolher equipe
team_list = get_available_teams()
selected_team_name = st.sidebar.selectbox(
    "2. Escolha a Equipe:",
    options=team_list,
    index=team_list.index("Boston Celtics") if "Boston Celtics" in team_list else 0
)

# 3. Carregar dados
team_id = get_team_id(selected_team_name)
df_raw = pd.DataFrame()

if team_id:
    data_load_state = st.info(f"Carregando dados de jogos do **{selected_team_name}**...")
    try:
        df_raw = load_team_game_log(team_id)
        if not df_raw.empty:
            data_load_state.success("Dados carregados com sucesso!")
        else:
            data_load_state.warning("Nenhum dado encontrado para a temporada 2024-2025. Tentando carregar dados de exemplo.")
            st.warning("A `nba_api` pode n√£o ter dados para a temporada 2024-2025 ainda. A an√°lise pode falhar.")
            
    except Exception as e:
        data_load_state.error(f"Erro ao carregar dados: {e}")
else:
    st.error("Time n√£o encontrado. Por favor, selecione um time v√°lido.")

# Verificar se os dados foram carregados
if not df_raw.empty:
    
    # Exibir dados brutos (opcional)
    if st.sidebar.checkbox('Mostrar Dados Brutos'):
        st.subheader(f"Dados Brutos de Jogos do {selected_team_name}")
        st.dataframe(df_raw)
        
    # Colunas de estat√≠sticas dispon√≠veis para sele√ß√£o de X e Y
    available_stats = get_available_stats_columns(df_raw)
    
    # 4. Escolher vari√°vel dependente (Y)
    y_options = available_stats
    
    # Regress√£o Log√≠stica deve ter 'WIN' como vari√°vel dependente
    if regression_type == "Log√≠stica":
        if 'WIN' not in y_options:
            st.error("A Regress√£o Log√≠stica requer uma vari√°vel bin√°ria (como 'WIN'). Dados insuficientes.")
            y_col = None
        else:
            y_col = 'WIN'
            st.sidebar.markdown(f"**3. Vari√°vel Dependente (Y):** `WIN` (Vit√≥ria/Derrota) - **Fixa para Log√≠stica**")
    else:
        # Regress√£o Linear: permite escolher
        linear_options = [col for col in y_options if col not in ['WIN', 'GAME_DATE']]
        if not linear_options:
            st.error("N√£o h√° vari√°veis num√©ricas dispon√≠veis para Regress√£o Linear.")
            y_col = None
        else:
            y_col = st.sidebar.selectbox(
                "3. Escolha a Vari√°vel Dependente (Y):",
                options=linear_options,
                index=linear_options.index('PTS') if 'PTS' in linear_options else 0
            )
    
    # 5. Selecionar vari√°veis independentes (X)
    x_options = [col for col in available_stats if col not in [y_col, 'GAME_DATE']]
    
    # Garantir que Log√≠stica n√£o use 'WIN' em X
    if regression_type == "Log√≠stica" and 'WIN' in x_options:
        x_options.remove('WIN')
        
    x_cols = st.sidebar.multiselect(
        "4. Selecione as Vari√°veis Independentes (X):",
        options=x_options,
        default=x_options[:3] if len(x_options) >= 3 else x_options
    )
    
    # Configura√ß√µes avan√ßadas
    st.sidebar.markdown("---")
    st.sidebar.subheader("üîß Configura√ß√µes Avan√ßadas")
    
    # Tamanho do conjunto de teste
    test_size = st.sidebar.slider(
        "Tamanho do Conjunto de Teste:",
        min_value=0.1,
        max_value=0.5,
        value=0.2,
        step=0.05,
        help="Propor√ß√£o dos dados que ser√£o usados para teste"
    )
    
    # Janela para m√©dia m√≥vel
    window_size = st.sidebar.slider(
        "Janela da M√©dia M√≥vel:",
        min_value=3,
        max_value=10,
        value=5,
        step=1,
        help="N√∫mero de jogos para calcular a m√©dia m√≥vel"
    )
    
    # Threshold para classifica√ß√£o (apenas log√≠stica)
    if regression_type == "Log√≠stica":
        threshold = st.sidebar.slider(
            "Threshold de Classifica√ß√£o:",
            min_value=0.1,
            max_value=0.9,
            value=0.5,
            step=0.05,
            help="Probabilidade m√≠nima para classificar como vit√≥ria"
        )
    
    # 6. Bot√£o de Execu√ß√£o
    st.sidebar.markdown("---")
    run_analysis = st.sidebar.button("‚ñ∂Ô∏è Executar An√°lise")
    
    # --- L√≥gica Principal da An√°lise ---
    if run_analysis and y_col and x_cols:
        
        st.header(f"Resultados da An√°lise de Regress√£o {regression_type}")
        st.subheader(f"Previs√£o de **{y_col}** usando {len(x_cols)} vari√°veis")
        
        try:
            # 1. Pr√©-processamento e Divis√£o de Dados
            X_train, X_test, y_train, y_test, scaler = prepare_data(
                df_raw, y_col, x_cols, test_size=test_size
            )
            
            # Verificar se h√° dados suficientes
            if X_train.empty or X_test.empty:
                st.error("Dados insuficientes para treino e teste ap√≥s o pr√©-processamento.")
            elif len(X_train) < len(x_cols) + 1:
                st.warning(f"Poucos dados ({len(X_train)}) para o n√∫mero de vari√°veis ({len(x_cols)}). Tente reduzir as vari√°veis independentes.")
            else:
                # 2. Treinamento do Modelo
                if regression_type == "Linear":
                    model = LinearRegressionModel()
                    model.train(X_train, y_train)
                    y_pred = model.predict(X_test)
                    metrics = model.evaluate(y_test, y_pred)
                    
                else: # Log√≠stica
                    model = LogisticRegressionModel()
                    model.train(X_train, y_train)
                    y_pred_proba = model.predict_proba(X_test)
                    y_pred_class = model.predict_class(X_test, threshold=threshold)
                    metrics = model.evaluate(y_test, y_pred_class, y_pred_proba)
                    
                # 3. Exibi√ß√£o de M√©tricas e Coeficientes
                col1, col2 = st.columns(2)
                
                with col1:
                    st.subheader("üìä M√©tricas de Avalia√ß√£o")
                    metrics_df = pd.DataFrame(metrics.items(), columns=['M√©trica', 'Valor'])
                    st.dataframe(metrics_df.style.format({'Valor': "{:.4f}"}), hide_index=True)
                
                with col2:
                    st.subheader("üî¢ Coeficientes da Regress√£o (Œ≤)")
                    df_coef = model.get_coefficients(x_cols)
                    st.dataframe(df_coef.style.format({'Coeficiente (Œ≤)': "{:.4f}"}), hide_index=True)
                
                # Equa√ß√£o da Regress√£o (apenas para Linear)
                if regression_type == "Linear":
                    st.subheader("üìê Equa√ß√£o da Regress√£o")
                    st.code(model.get_equation(x_cols), language='markdown')
                
                # 4. Visualiza√ß√µes Principais
                st.header("üìà Visualiza√ß√µes")
                
                # Gr√°ficos principais baseados no tipo de modelo
                if regression_type == "Linear":
                    st.subheader("üîç Rela√ß√µes Individuais: Vari√°veis vs " + y_col)
                    st.plotly_chart(
                        plot_regression_line(df_raw, x_cols, y_col), 
                        use_container_width=True
                    )

                    # Import√¢ncia das Features
                    st.subheader("üéØ Import√¢ncia das Vari√°veis")
                    st.plotly_chart(plot_feature_importance(model.model.coef_, x_cols, regression_type), use_container_width=True)
                    
                    # Os gr√°ficos existentes continuam abaixo...
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.subheader("üìä Previs√£o vs Realidade")
                        st.plotly_chart(plot_prediction_vs_reality(y_test, y_pred, regression_type), use_container_width=True)
                    
                    with col2:
                        st.subheader("üìâ Gr√°fico de Res√≠duos")
                        st.plotly_chart(plot_residuals(y_test, y_pred, regression_type), use_container_width=True)
                    

                else:
                    # Gr√°ficos para Regress√£o Log√≠stica
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.subheader("üìä Probabilidade de Vit√≥ria")
                        st.plotly_chart(plot_prediction_vs_reality(y_test, y_pred_proba, regression_type), use_container_width=True)
                        
                    with col2:
                        st.subheader("üìà Curva ROC")
                        st.plotly_chart(plot_roc_curve(y_test, y_pred_proba), use_container_width=True)
                    
                    col3, col4 = st.columns(2)
                    
                    with col3:
                        st.subheader("üéØ Matriz de Confus√£o")
                        st.pyplot(plot_confusion_matrix(y_test, y_pred_class), use_container_width=True)
                        
                    with col4:
                        st.subheader("‚öñÔ∏è Curva de Calibra√ß√£o")
                        st.plotly_chart(plot_calibration_curve(y_test, y_pred_proba), use_container_width=True)
                    
                    # Import√¢ncia das Features
                    st.subheader("üìä Import√¢ncia das Vari√°veis")
                    st.plotly_chart(plot_feature_importance(model.model.coef_[0], x_cols, regression_type), use_container_width=True)
                
                # 6. An√°lise de Tend√™ncia
                st.subheader(f"üìà Tend√™ncia de {y_col} ao Longo do Tempo")
                st.plotly_chart(
                    plot_trend_with_confidence(df_raw, 'GAME_DATE', y_col, window=window_size), 
                    use_container_width=True
                )
       
        except LinAlgError as e:
            if "singular matrix" in str(e).lower():
                st.error("""
                **‚ùå Erro de Matriz Singular**: Isso geralmente ocorre quando:
                - H√° multicolinearidade (vari√°veis muito correlacionadas)
                - Mais vari√°veis do que observa√ß√µes
                - Vari√°veis com vari√¢ncia zero
                
                **üí° Solu√ß√µes**: 
                - Remova vari√°veis altamente correlacionadas
                - Reduza o n√∫mero de vari√°veis independentes
                - Tente diferentes combina√ß√µes de vari√°veis
                """)
            else:
                st.error(f"Erro de √°lgebra linear: {e}")
        except ValueError as e:
            st.error(f"Erro nos dados: {e}")
        except Exception as e:
            st.error(f"Ocorreu um erro durante a an√°lise: {e}")
            st.exception(e)
            
    elif run_analysis and (not y_col or not x_cols):
        st.warning("‚ö†Ô∏è Por favor, selecione a Vari√°vel Dependente (Y) e pelo menos uma Vari√°vel Independente (X) para executar a an√°lise.")

else:
    st.info("üëÜ Selecione uma equipe na sidebar para come√ßar a an√°lise.")

# Rodap√©
st.markdown("---")
st.markdown(
    """
    <div style='text-align: center; color: gray;'>
    üèÄ Desenvolvido com NBA API e Streamlit ‚Ä¢ An√°lise Preditiva de Dados da NBA
    </div>
    """,
    unsafe_allow_html=True
)