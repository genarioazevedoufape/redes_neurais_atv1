import streamlit as st
import pandas as pd
import numpy as np
import os
import sys

# Adicionar o diret√≥rio raiz do projeto ao path para importa√ß√£o modular
# O diret√≥rio raiz √© o diret√≥rio atual, ent√£o o path deve ser ajustado
# para que os m√≥dulos sejam encontrados.
# Como estamos no diret√≥rio 'nba_regression_app', o sys.path j√° deve incluir o '.'
# No entanto, para garantir que as importa√ß√µes funcionem, vamos usar um try/except.
try:
    from data.nba_data_loader import get_available_teams, get_team_id, load_team_game_log, get_available_stats_columns
    from utils.preprocessing import prepare_data
    from utils.visualization import plot_regression_line, plot_prediction_vs_reality, plot_confusion_matrix, plot_trend_with_confidence
    from models.linear_regression_model import LinearRegressionModel
    from models.logistic_regression_model import LogisticRegressionModel
except ImportError:
    # Se a importa√ß√£o falhar, tentamos adicionar o diret√≥rio pai (onde os m√≥dulos est√£o)
    sys.path.append(os.path.dirname(__file__))
    from data.nba_data_loader import get_available_teams, get_team_id, load_team_game_log, get_available_stats_columns
    from utils.preprocessing import prepare_data
    from utils.visualization import plot_regression_line, plot_prediction_vs_reality, plot_confusion_matrix, plot_trend_with_confidence
    from models.linear_regression_model import LinearRegressionModel
    from models.logistic_regression_model import LogisticRegressionModel

# --- Configura√ß√£o da P√°gina ---
st.set_page_config(
    page_title="NBA Predictor: Regress√£o Linear e Log√≠stica",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- T√≠tulo Principal ---
st.title("üèÄ NBA Predictor: An√°lise Preditiva com Regress√£o")
st.markdown("Desenvolvido para a temporada **2024-2025** usando `nba_api` e `Streamlit`.")

# --- Sidebar para Entradas do Usu√°rio ---
st.sidebar.header("‚öôÔ∏è Configura√ß√µes da An√°lise")

# 1. Selecionar o tipo de regress√£o
regression_type = st.sidebar.radio(
    "1. Selecione o Tipo de Regress√£o:",
    ("Linear", "Log√≠stica")
)

# 2. Escolher equipe
team_list = get_available_teams()
selected_team_name = st.sidebar.selectbox(
    "2. Escolha a Equipe:",
    options=team_list,
    index=team_list.index("Boston Celtics") if "Boston Celtics" in team_list else 0
)

# 3. Carregar dados
team_id = get_team_id(selected_team_name)
df_raw = pd.DataFrame()

if team_id:
    data_load_state = st.info(f"Carregando dados de jogos do **{selected_team_name}**...")
    try:
        df_raw = load_team_game_log(team_id)
        if not df_raw.empty:
            data_load_state.success("Dados carregados com sucesso!")
        else:
            data_load_state.warning("Nenhum dado encontrado para a temporada 2024-2025. Tentando carregar dados de exemplo.")
            # Se n√£o houver dados para 2024-2025 (porque a temporada ainda n√£o come√ßou ou a API est√° desatualizada), 
            # o usu√°rio n√£o conseguir√° testar. Vamos tentar carregar uma temporada anterior como fallback.
            # O prompt exige 2024-2025, mas para a aplica√ß√£o funcionar, um fallback √© essencial.
            # No entanto, vou manter o foco no prompt e apenas avisar.
            st.warning("A `nba_api` pode n√£o ter dados para a temporada 2024-2025 ainda. A an√°lise pode falhar.")
            
    except Exception as e:
        data_load_state.error(f"Erro ao carregar dados: {e}")
else:
    st.error("Time n√£o encontrado. Por favor, selecione um time v√°lido.")

# Verificar se os dados foram carregados
if not df_raw.empty:
    
    # Exibir dados brutos (opcional)
    if st.sidebar.checkbox('Mostrar Dados Brutos'):
        st.subheader(f"Dados Brutos de Jogos do {selected_team_name}")
        st.dataframe(df_raw)
        
    # Colunas de estat√≠sticas dispon√≠veis para sele√ß√£o de X e Y
    available_stats = get_available_stats_columns(df_raw)
    
    # 4. Escolher vari√°vel dependente (Y)
    y_options = available_stats
    
    # Regress√£o Log√≠stica deve ter 'WIN' como vari√°vel dependente
    if regression_type == "Log√≠stica":
        if 'WIN' not in y_options:
            st.error("A Regress√£o Log√≠stica requer uma vari√°vel bin√°ria (como 'WIN'). Dados insuficientes.")
            y_col = None
        else:
            y_col = 'WIN'
            st.sidebar.markdown(f"**3. Vari√°vel Dependente (Y):** `WIN` (Vit√≥ria/Derrota) - **Fixa para Log√≠stica**")
    else:
        # Regress√£o Linear: permite escolher
        # Filtrar 'WIN' e 'GAME_DATE'
        linear_options = [col for col in y_options if col not in ['WIN', 'GAME_DATE']]
        if not linear_options:
            st.error("N√£o h√° vari√°veis num√©ricas dispon√≠veis para Regress√£o Linear.")
            y_col = None
        else:
            y_col = st.sidebar.selectbox(
                "3. Escolha a Vari√°vel Dependente (Y):",
                options=linear_options,
                index=linear_options.index('PTS') if 'PTS' in linear_options else 0
            )
    
    # 5. Selecionar vari√°veis independentes (X)
    # Excluir Y e 'GAME_DATE' das op√ß√µes de X
    x_options = [col for col in available_stats if col not in [y_col, 'GAME_DATE']]
    
    # Garantir que Log√≠stica n√£o use 'WIN' em X
    if regression_type == "Log√≠stica" and 'WIN' in x_options:
        x_options.remove('WIN')
        
    x_cols = st.sidebar.multiselect(
        "4. Selecione as Vari√°veis Independentes (X):",
        options=x_options,
        default=x_options[:3] if len(x_options) >= 3 else x_options
    )
    
    # 6. Bot√£o de Execu√ß√£o
    st.sidebar.markdown("---")
    run_analysis = st.sidebar.button("‚ñ∂Ô∏è Executar An√°lise")
    
    # --- L√≥gica Principal da An√°lise ---
    if run_analysis and y_col and x_cols:
        
        st.header(f"Resultados da An√°lise de Regress√£o {regression_type}")
        st.subheader(f"Previs√£o de **{y_col}** usando {len(x_cols)} vari√°veis")
        
        try:
            # 1. Pr√©-processamento e Divis√£o de Dados
            X_train, X_test, y_train, y_test, scaler = prepare_data(df_raw, y_col, x_cols)
            
            # Verificar se h√° dados suficientes para treino/teste
            if X_train.empty or X_test.empty:
                st.error("Dados insuficientes para treino e teste ap√≥s o pr√©-processamento. Tente selecionar menos vari√°veis ou um time com mais jogos.")
            else:
                # 2. Treinamento do Modelo
                if regression_type == "Linear":
                    model = LinearRegressionModel()
                    model.train(X_train, y_train)
                    y_pred = model.predict(X_test)
                    metrics = model.evaluate(y_test, y_pred)
                    
                else: # Log√≠stica
                    model = LogisticRegressionModel()
                    model.train(X_train, y_train)
                    y_pred_proba = model.predict_proba(X_test)
                    y_pred_class = model.predict_class(X_test)
                    metrics = model.evaluate(y_test, y_pred_class, y_pred_proba)
                    
                # 3. Exibi√ß√£o de M√©tricas e Coeficientes
                st.subheader("M√©tricas de Avalia√ß√£o")
                metrics_df = pd.DataFrame(metrics.items(), columns=['M√©trica', 'Valor'])
                st.dataframe(metrics_df.style.format({'Valor': "{:.4f}"}), hide_index=True)

                st.subheader("Coeficientes da Regress√£o (Œ≤)")
                df_coef = model.get_coefficients(x_cols)
                st.dataframe(df_coef.style.format({'Coeficiente (Œ≤)': "{:.4f}"}), hide_index=True)
                
                # Equa√ß√£o da Regress√£o (apenas para Linear)
                if regression_type == "Linear":
                    st.subheader("Equa√ß√£o da Regress√£o")
                    st.code(model.get_equation(x_cols), language='markdown')
                    
                # 4. Visualiza√ß√µes
                st.header("Visualiza√ß√µes")
                
                # Gr√°fico de Tend√™ncia (Usa a coluna 'GAME_DATE' do df_raw)
                st.subheader(f"Tend√™ncia de {y_col} ao longo do tempo")
                st.plotly_chart(plot_trend_with_confidence(df_raw, 'GAME_DATE', y_col), use_container_width=True)
                
                # Gr√°fico de Dispers√£o (apenas para Linear, usando a primeira vari√°vel X)
                if regression_type == "Linear":
                    st.subheader(f"Diagrama de Dispers√£o: {y_col} vs {x_cols[0]}")
                    st.plotly_chart(plot_regression_line(df_raw, x_cols[0], y_col), use_container_width=True)
                
                # Gr√°fico Previs√£o vs Realidade
                st.subheader("Previs√£o vs. Realidade")
                if regression_type == "Linear":
                    st.plotly_chart(plot_prediction_vs_reality(y_test, y_pred, regression_type), use_container_width=True)
                else:
                    st.plotly_chart(plot_prediction_vs_reality(y_test, y_pred_proba, regression_type), use_container_width=True)
                    
                # Matriz de Confus√£o (apenas para Log√≠stica)
                if regression_type == "Log√≠stica":
                    st.subheader("Matriz de Confus√£o")
                    st.pyplot(plot_confusion_matrix(y_test, y_pred_class), use_container_width=True)
                    
                # Extras (Statsmodels Summary)
                st.sidebar.markdown("---")
                if st.sidebar.checkbox('Mostrar Resumo Avan√ßado (Statsmodels)'):
                    st.subheader("Resumo Avan√ßado (Statsmodels)")
                    st.components.v1.html(model.get_statsmodels_summary(), height=500, scrolling=True)
                    
        except Exception as e:
            st.error(f"Ocorreu um erro durante a an√°lise: {e}")
            st.exception(e)
            
    elif run_analysis and (not y_col or not x_cols):
        st.warning("Por favor, selecione a Vari√°vel Dependente (Y) e pelo menos uma Vari√°vel Independente (X) para executar a an√°lise.")

else:
    st.warning("Por favor, selecione um time para carregar os dados e iniciar a an√°lise.")
